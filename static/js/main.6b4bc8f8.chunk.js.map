{"version":3,"sources":["components/Row.jsx","utils/StatUtils.js","components/Header.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Row","id","currentArm","winnerArm","isWin","cvr","total","toFixed","beatRatio","armA","armB","prob","betaln","jStat","log","Math","exp","totalA","successA","totalB","successB","alphaA","betaA","alphaB","betaB","i","getWinProb","conversion","className","name","type","min","Header","href","role","aria-label","Footer","App","useState","arm","setArm","alphabet","setAlphabet","table","setTable","winner","setWinner","onChange","e","preventDefault","target","split","metricName","armName","metricValue","parseInt","value","armList","Object","keys","length","winningArm","reduce","a","b","map","elem","key","onClick","String","fromCharCode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b4bc8f8.chunk.js","sourcesContent":["import React from \"react\";\nimport { getWinProb } from \"../utils/StatUtils\";\n\nexport const Row = ({ id, currentArm, winnerArm, isWin }) => {\n  const cvr =\n    currentArm?.total > 0\n      ? `${((currentArm?.cvr || 0) * 100).toFixed(1)}%`\n      : \"\";\n\n  const beatRatio = isWin\n    ? \"â€” %\"\n    : `${getWinProb(\n        [currentArm?.total || 0, currentArm?.conversion || 0],\n        [winnerArm?.total || 0, winnerArm?.conversion || 0]\n      ).toFixed(1)}%`;\n  return (\n    <tr className={isWin ? \"winner\" : \"\"}>\n      <td>{`${id}`}</td>\n      <td>\n        <input\n          className=\"metric-input\"\n          name={`total-${id}`}\n          type=\"number\"\n          min=\"0\"\n        />\n      </td>\n      <td>\n        <input\n          className=\"metric-input\"\n          name={`conversion-${id}`}\n          type=\"number\"\n          min=\"0\"\n        />\n      </td>\n      <td>{cvr}</td>\n      <td>{beatRatio}</td>\n    </tr>\n  );\n};\n\nexport default Row;\n","import jStat from \"jstat\";\n\nexport function getWinProb(armA, armB) {\n  let prob = 0.0;\n  const { betaln } = jStat;\n  const { log, exp } = Math;\n  const [totalA, successA] = armA;\n  const [totalB, successB] = armB;\n\n  const alphaA = successA + 1;\n  const betaA = totalA - successA + 1;\n  const alphaB = successB + 1;\n  const betaB = totalB - successB + 1;\n\n  for (let i = 0; i < alphaB - 1; i++)\n    prob += exp(\n      betaln(alphaA + i, betaB + betaA) -\n        log(betaB + i) -\n        betaln(1 + i, betaB) -\n        betaln(alphaA, betaA)\n    );\n\n  return prob * 100;\n}\n","import React from \"react\";\n\nexport const Header = () => {\n  return (\n    <header className=\"page-header\">\n      <div className=\"page-header-inner\">\n        <div className=\"title\">\n          <a href=\"/\">\n            <span role=\"img\" aria-label=\"dice\">\n              ðŸŽ²\n            </span>\n            Bayesian A/B Testing Calculator\n          </a>\n        </div>\n      </div>\n    </header>\n  );\n};\n","import React from \"react\";\n\nexport const Footer = () => {\n  return (\n    <footer className=\"footer\">\n      Â©Dohyung Park(\n      <a href=\"https://github.com/dohyungp/bayesian-ab-test-calculator\">\n        github\n      </a>\n      )\n    </footer>\n  );\n};\n","import React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./components/Row\";\nimport { Header } from \"./components/Header\";\nimport { Footer } from \"./components/Footer\";\nfunction App() {\n  const [arm, setArm] = useState({});\n  const [alphabet, setAlphabet] = useState(67);\n  const [table, setTable] = useState([\"A\", \"B\"]);\n  const [winner, setWinner] = useState(null);\n\n  function handleChange(e) {\n    e.preventDefault();\n    const [metricName, armName] = e.target.name.split(\"-\");\n    const metricValue = parseInt(e.target.value);\n    let cvr = 0;\n\n    if (metricName === \"total\")\n      cvr = (arm[[armName]]?.conversion || 0) / metricValue;\n    else if (arm[[armName]]?.total > 0)\n      cvr = metricValue / arm[[armName]].total;\n\n    setArm({\n      ...arm,\n      [armName]: {\n        ...arm[[armName]],\n        [metricName]: metricValue || 0,\n        cvr,\n      },\n    });\n\n    const armList = Object.keys(arm);\n\n    if (armList.length < 1) return;\n\n    let winningArm = armList.reduce((a, b) => {\n      let aCVR = a === armName ? cvr : arm[[a]]?.cvr || 0;\n      let bCVR = b === armName ? cvr : arm[[b]]?.cvr || 0;\n\n      return aCVR > bCVR ? a : b;\n    });\n\n    setWinner(winningArm);\n  }\n\n  function addNewVariation(e) {\n    e.preventDefault();\n    setTable([...table, String.fromCharCode(alphabet)]);\n    setAlphabet(alphabet + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"container\">\n        <form onChange={handleChange}>\n          <table className=\"table\">\n            <thead className=\"header\">\n              <tr>\n                <th></th>\n                <th>Visitors</th>\n                <th>Conversion</th>\n                <th>CVR(%)</th>\n                <th>{`Pr(${winner || \"A\"} > other)`}</th>\n              </tr>\n            </thead>\n            <tbody className=\"body\">\n              {table.map((elem) => (\n                <Row\n                  key={`key-${elem}`}\n                  id={elem}\n                  currentArm={arm[elem]}\n                  winnerArm={arm[winner]}\n                  isWin={winner === elem}\n                />\n              ))}\n            </tbody>\n          </table>\n        </form>\n      </div>\n      <button className=\"add-button\" onClick={addNewVariation}>\n        Add Another Variation\n      </button>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}